package com.te.lms.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.google.common.collect.Lists;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.entity.Admin;
import com.te.lms.entity.AppUser;
import com.te.lms.entity.Mentor;
import com.te.lms.entity.Roles;
import com.te.lms.entity.Skills;
import com.te.lms.repository.AdminRepository;
import com.te.lms.repository.AppUserRepository;
import com.te.lms.repository.MentorRepository;
import com.te.lms.repository.RolesRepository;
import com.te.lms.service.implementation.AdminServiceImpl;

@SpringBootTest
class TestAdminServiceImpl {

	@MockBean
	private MentorRepository mentorRepository;

	@MockBean
	private AppUserRepository appUserRepository;
	
	private AdminRepository adminRepository;

	@MockBean
	private RolesRepository rolesRepository;

	@InjectMocks
	private AdminServiceImpl adminService;
	
	
	@BeforeEach
	public void setUp() {
		Roles employee = Roles.builder().roleName("ROLE_EMPLOYEE").build();
		Roles mentor = Roles.builder().roleName("ROLE_MENTOR").build();
		Roles admin = Roles.builder().roleName("ROLE_ADMIN").appUser(Lists.newArrayList()).build();

		Admin admin01 = Admin.builder().adminId("TYC001").adminName("Rakesh Reddy").build();

		AppUser adminCredentials = AppUser.builder().username(admin01.getAdminId()).password("password")
				.roles(Lists.newArrayList()).build();

		admin.getAppUser().add(adminCredentials);
		adminCredentials.getRoles().add(admin);

		rolesRepository.save(employee);
		rolesRepository.save(mentor);
		rolesRepository.save(admin);
		adminRepository.save(admin01);

		appUserRepository.save(adminCredentials);
	}

	@Test
	public void testRegisterMentor() {

		MentorDto mentorDto = MentorDto.builder().employeeId("TY001").emailId("mentor@gmail.com")
				.skillsDto(List.of(SkillsDto.builder().skillName("java").build())).mentorName("Rakesh").build();
		Mentor mentor = Mentor.builder().employeeId("TY001").emailId("mentor@gmail.com")
				.skills(List.of(Skills.builder().skillName("java").build())).mentorName("Rakesh").build();

		AppUser appUser = AppUser.builder().username(mentorDto.getEmployeeId()).password("Welcome123")
				.roles(Lists.newArrayList()).build();
		Roles role = Roles.builder().roleName("ROLE_MENTOR").appUser(Lists.newArrayList()).build();
		appUser.getRoles().add(role);
		role.getAppUser().add(appUser);

		Mockito.when(rolesRepository.findByRoleName(Mockito.any())).thenReturn(Optional.ofNullable(role));
		Mockito.when(appUserRepository.save(Mockito.any())).thenReturn(appUser);
		Mockito.when(mentorRepository.save(Mockito.any())).thenReturn(mentor);

		String message = "Hello " + mentor.getMentorName() + " \n" + " welcome to the team of techno elevate"
				+ "username : " + appUser.getUsername() + "\n" + " password :" + appUser.getPassword();
		MessageDto messageDto = MessageDto.builder().message(message).emaild(mentor.getEmailId()).build();

		Optional<MessageDto> messageDto2 = adminService.registerMentor(mentorDto);

		assertEquals(messageDto2.get().getEmaild(), mentor.getEmailId());

	}

}
