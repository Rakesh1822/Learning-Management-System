package com.te.lms.service.implementation;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.te.lms.dto.AddressDetailsDto;
import com.te.lms.dto.ApproveDto;
import com.te.lms.dto.BankDetailsDto;
import com.te.lms.dto.ContactDto;
import com.te.lms.dto.EducationDetailsDto;
import com.te.lms.dto.EmployeeDto;
import com.te.lms.dto.ExperienceDto;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.NewBatchDto;
import com.te.lms.dto.RequestsListsDto;
import com.te.lms.dto.SecondaryInfoDto;
import com.te.lms.dto.SkillsDto;
import com.te.lms.dto.TechnicalSkillsDto;
import com.te.lms.dto.TechnologiesDto;
import com.te.lms.dto.UpdateBatchDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.entity.AddressDetails;
import com.te.lms.entity.AppUser;
import com.te.lms.entity.Batch;
import com.te.lms.entity.Contact;
import com.te.lms.entity.EducationDetails;
import com.te.lms.entity.Employee;
import com.te.lms.entity.Experience;
import com.te.lms.entity.Mentor;
import com.te.lms.entity.RequestsList;
import com.te.lms.entity.Roles;
import com.te.lms.entity.Skills;
import com.te.lms.entity.TechnicalSkills;
import com.te.lms.entity.Technologies;
import com.te.lms.enums.BatchStatus;
import com.te.lms.enums.EmployeeStatus;
import com.te.lms.repository.AppUserRepository;
import com.te.lms.repository.BatchRepository;
import com.te.lms.repository.EmployeeRepository;
import com.te.lms.repository.MentorRepository;
import com.te.lms.repository.RequestsRepository;
import com.te.lms.repository.RolesRepository;
import com.te.lms.repository.TechnologiesRepository;
import com.te.lms.service.AdminService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class AdminServiceImpl implements AdminService {

	private final MentorRepository mentorRepository;
	private final BatchRepository batchRepository;
	private final RolesRepository rolesRepository;
	private final AppUserRepository appUserRepository;
	private final RequestsRepository requestsRepository;
	private final TechnologiesRepository technologiesRepository;
	private final EmployeeRepository employeeRepository;

	@Override
	public Optional<MessageDto> registerMentor(MentorDto mentorDto) {

		Mentor mentor = new Mentor();
		BeanUtils.copyProperties(mentorDto, mentor);

		for (SkillsDto skillsDto : mentorDto.getSkillsDto()) {
			Skills skillsEntity = new Skills();
			BeanUtils.copyProperties(skillsDto, skillsEntity);
			mentor.getSkills().add(skillsEntity);
			skillsEntity.setMentor(mentor);
		}
		Optional<Roles> optRole = rolesRepository.findByRoleName("ROLE_MENTOR");
		if (optRole.isPresent()) {
			AppUser appUser = AppUser.builder().username(mentor.getEmployeeId()).password("Welcome123")
					.roles(Lists.newArrayList()).build();
			appUser.getRoles().add(optRole.get());
			Roles role = Roles.builder().roleName("ROLE_MENTOR").appUser(Lists.newArrayList()).build();
			role.getAppUser().add(appUser);
			mentor.setMentorStatus(EmployeeStatus.ACTIVE);
			appUserRepository.save(appUser);
			mentorRepository.save(mentor);
		   String message = "Hello " + mentor.getMentorName() + " \n"
					+ " welcome to the team of techno elevate" + "username : " + appUser.getUsername() + "\n"
					+ " password :" + appUser.getPassword();
			MessageDto messageDto = MessageDto.builder().message(message).emaild(mentor.getEmailId()).build();
		}
		return null;
	}

	@Override
	public Optional<String> createBatch(NewBatchDto newBatchDto) {
		Batch batch = new Batch();
		BeanUtils.copyProperties(newBatchDto, batch);
		for (TechnologiesDto technologiesDto : newBatchDto.getTechnologiesDto()) {
			Technologies technologiesEntity = new Technologies();
			BeanUtils.copyProperties(technologiesDto, technologiesEntity);
			batch.getTechnologies().add(technologiesEntity);
			technologiesEntity.getBatch().add(batch);
		}

		Optional<Mentor> mentor = mentorRepository.findByMentorName(newBatchDto.getMentorName());
		if (mentor.isPresent()) {
			batch.setMentor(mentor.get());
			mentor.get().getBatch().add(batch);
		}

		batchRepository.save(batch);
		return Optional.ofNullable(newBatchDto.getBatchId());

	}

	@Override
	public Optional<List<RequestsListsDto>> getRequestList() {
		List<RequestsList> employees = requestsRepository.getList();
		if (employees != null) {
			List<RequestsListsDto> requestListDto = Lists.newArrayList();
			for (RequestsList requestsLists : employees) {
				RequestsListsDto requestsListsDto2 = new RequestsListsDto();
				BeanUtils.copyProperties(requestsLists, requestsListsDto2);
				requestListDto.add(requestsListsDto2);
			}
			return Optional.ofNullable(requestListDto);
		}
		return null;
	}

	@Override
	public Boolean updateMentor(String empId, UpdateMentorDto updateMentorDto) {
		Optional<Mentor> optMentor = mentorRepository.findById(empId);
		if (optMentor.isPresent()) {
			Mentor mentor = optMentor.get();
			BeanUtils.copyProperties(updateMentorDto, mentor);
			List<Skills> skills1 = mentor.getSkills();
			List<Skills> skills2 = Lists.newArrayList();

			for (SkillsDto skillsDto : updateMentorDto.getSkillsDto()) {
				Skills skillEntity = new Skills();
				BeanUtils.copyProperties(skillsDto, skillEntity);
				skills2.add(skillEntity);
			}
			for (int i = 0; i < skills2.size(); i++) {
				if (i < skills1.size()) {
					BeanUtils.copyProperties(skills2.get(i), skills1.get(i), new String[] { "sno", "mentor" });
				} else {
					skills1.add(skills2.get(i));
					skills2.get(i).setMentor(mentor);
				}
			}
			mentor.setSkills(skills1);
			mentorRepository.save(mentor);
			return true;
		}
		return false;
	}

	@Override
	public Boolean updateBatch(String batchId, UpdateBatchDto updateBatchDto) {

		Optional<Batch> optBatch = batchRepository.findById(batchId);
		if (optBatch.isPresent()) {
			Batch batch = optBatch.get();
			BeanUtils.copyProperties(updateBatchDto, batch);

			List<Technologies> technologies1 = batch.getTechnologies();
			technologiesRepository.deleteAll(technologies1);

			for (TechnologiesDto technologiesDto : updateBatchDto.getTechnologiesDto()) {
				Technologies technologies = new Technologies();
				BeanUtils.copyProperties(technologiesDto, technologies);
				technologies1.add(technologies);
				technologies.getBatch().add(batch);
			}
			batch.setTechnologies(technologies1);
			batchRepository.save(batch);
			return true;
		}
		return false;
	}

	@Override
	public Boolean deleteMentor(String empId) {
		Optional<Mentor> optMentor = mentorRepository.findById(empId);
		if (optMentor.isPresent()) {
			optMentor.get().setMentorStatus(EmployeeStatus.TERMINATED);
			mentorRepository.save(optMentor.get());
			return true;
		}
		return false;
	}

	@Override
	public Boolean deleteBatch(String batchId) {
		Optional<Batch> optBatch = batchRepository.findById(batchId);
		if (optBatch.isPresent()) {
			Batch batch = optBatch.get();
			batch.setBatchStatus(BatchStatus.COMPLETED);
			return true;
		}
		return false;
	}

	@Override
	public Optional<Object> getEmployee(String employeeId) {
		Optional<Employee> empFromDb = employeeRepository.findById(employeeId);
		if (empFromDb.isPresent()) {
			Employee employee = empFromDb.get();
			EmployeeDto employeeDto = new EmployeeDto();
			BeanUtils.copyProperties(employee, employeeDto);

			SecondaryInfoDto secondaryInfoDto = new SecondaryInfoDto();
			BeanUtils.copyProperties(employee.getSecondaryInfo(), secondaryInfoDto);
			employeeDto.setSecondaryInfoDto(secondaryInfoDto);

			BankDetailsDto bankDetailsDto = new BankDetailsDto();
			BeanUtils.copyProperties(employee.getBankDetails(), bankDetailsDto);
			employeeDto.setBankDetailsDto(bankDetailsDto);

			for (EducationDetails educationDetails : employee.getEducationDetails()) {
				EducationDetailsDto educationDetailsDto2 = new EducationDetailsDto();
				BeanUtils.copyProperties(educationDetails, educationDetailsDto2);
				employeeDto.getEducationDetailsDto().add(educationDetailsDto2);
			}

			for (AddressDetails addressDetails : employee.getAddressDetails()) {
				AddressDetailsDto addressDetailsDto2 = new AddressDetailsDto();
				BeanUtils.copyProperties(addressDetails, addressDetailsDto2);
				employeeDto.getAddressDetailsDto().add(addressDetailsDto2);
			}

			for (Experience experience : employee.getExperience()) {
				ExperienceDto experienceDto2 = new ExperienceDto();
				BeanUtils.copyProperties(experience, experienceDto2);
				employeeDto.getExperienceDto().add(experienceDto2);
			}

			for (Contact contact : employee.getContact()) {
				ContactDto contactDto2 = new ContactDto();
				BeanUtils.copyProperties(contact, contactDto2);
				employeeDto.getContactDto().add(contactDto2);
			}

			for (TechnicalSkills technicalSkills : employee.getTechnicalSkills()) {
				TechnicalSkillsDto technicalSkillsDto2 = new TechnicalSkillsDto();
				BeanUtils.copyProperties(technicalSkills, technicalSkillsDto2);
				employeeDto.getTechnicalSkillsDto().add(technicalSkillsDto2);
			}
			return Optional.ofNullable(employeeDto);

		}
		Optional<Mentor> mentorFromDb = mentorRepository.findById(employeeId);
		if (mentorFromDb.isPresent()) {
			MentorDto mentorDto = new MentorDto();
			BeanUtils.copyProperties(mentorFromDb.get(), mentorDto);

			for (Skills skills : mentorFromDb.get().getSkills()) {
				SkillsDto skillsDto2 = new SkillsDto();
				BeanUtils.copyProperties(skills, skillsDto2);
				mentorDto.getSkillsDto().add(skillsDto2);
			}
			return Optional.ofNullable(mentorDto);
		}
		return Optional.ofNullable(null);
	}

	@Override
	public Optional<List<MentorDto>> getMentors() {
		Optional<List<Mentor>> mentorsFromDb = mentorRepository.getMentors();
		if (mentorsFromDb.isPresent()) {
			List<MentorDto> mentorDto = Lists.newArrayList();
			for (Mentor mentor : mentorsFromDb.get()) {
				MentorDto mentorDto2 = new MentorDto();
				BeanUtils.copyProperties(mentor, mentorDto2);
				for (Skills skills : mentor.getSkills()) {
					SkillsDto skillsDto2 = new SkillsDto();
					BeanUtils.copyProperties(skills, skillsDto2);
					mentorDto2.getSkillsDto().add(skillsDto2);
				}
				mentorDto.add(mentorDto2);
			}
			return Optional.ofNullable(mentorDto);
		}
		return Optional.ofNullable(null);
	}

	@Override
	public Optional<List<NewBatchDto>> getBatchDetails() {
		List<Batch> batchesFromDb = batchRepository.findAll();
		if (batchesFromDb != null) {
			List<NewBatchDto> batchDtos = Lists.newArrayList();
			for (Batch batch : batchesFromDb) {
				NewBatchDto newBatchDto = new NewBatchDto();
				BeanUtils.copyProperties(batch, newBatchDto);
				Optional<String> optMentorName = Optional.ofNullable(batch.getMentor().getMentorName());
				if (optMentorName.isPresent()) {
					newBatchDto.setMentorName(batch.getMentor().getMentorName());
				}
				for (Technologies technologies : batch.getTechnologies()) {
					TechnologiesDto technologiesDto = new TechnologiesDto();
					BeanUtils.copyProperties(technologies, technologiesDto);
					newBatchDto.getTechnologiesDto().add(technologiesDto);
				}
				batchDtos.add(newBatchDto);
			}
			return Optional.ofNullable(batchDtos);
		}

		return Optional.ofNullable(null);
	}

	@Override
	public Optional<MessageDto> ApproveEmployee(String empId, ApproveDto approveDto) {
		Optional<Employee> employeeFromDb = employeeRepository.findById(empId);
		if (employeeFromDb.isPresent()) {
			Optional<Roles> optRoles = rolesRepository.findByRoleName("ROLE_EMPLOYEE");
			if (optRoles.isPresent()) {
				AppUser appUser = AppUser.builder().username(empId).password("Welcome123").roles(Lists.newArrayList())
						.build();
				appUser.getRoles().add(optRoles.get());
				Roles role = Roles.builder().roleName("ROLE_EMPLOYEE").appUser(Lists.newArrayList()).build();
				role.getAppUser().add(appUser);
				Optional<Batch> batch = batchRepository.findById(approveDto.getBatchId());
				employeeFromDb.get().setBatch(batch.get());
				batch.get().getEmployee().add(employeeFromDb.get());
				employeeFromDb.get().setEmployeeStatus(EmployeeStatus.ACTIVE);
				employeeRepository.save(employeeFromDb.get());
				appUserRepository.save(appUser);
				batchRepository.save(batch.get());

				String message = "Hello " + employeeFromDb.get().getEmployeeName() + "/n"
						+ " welcome to the team of techno elevate" + "username : " + appUser.getUsername() + "\n"
						+ " password :" + appUser.getPassword();
				MessageDto messageDto = MessageDto.builder().message(message)
						.emaild(employeeFromDb.get().getEmployeeEmailId()).build();
				return Optional.ofNullable(messageDto);
			}
		}
		return Optional.ofNullable(null);

	}

}
