package com.te.lms.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.te.lms.communication.Notify;
import com.te.lms.dto.ApproveDto;
import com.te.lms.dto.MentorDto;
import com.te.lms.dto.MessageDto;
import com.te.lms.dto.NewBatchDto;
import com.te.lms.dto.RequestsListsDto;
import com.te.lms.dto.UpdateBatchDto;
import com.te.lms.dto.UpdateMentorDto;
import com.te.lms.exceptions.BatchDetailsNotUpdatedException;
import com.te.lms.exceptions.NoMentorsFoundException;
import com.te.lms.exceptions.UnableToDeleteBatchException;
import com.te.lms.exceptions.UnableToFindTheEmployee;
import com.te.lms.response.GeneralResponse;
import com.te.lms.service.AdminService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
@RequestMapping(path = "/admin")
public class AdminController {

	private final AdminService adminService;
	private final Notify notify;

	@PostMapping(path = "/register/mentor")
	public GeneralResponse<String> registerMentor(@RequestBody MentorDto mentorDto) {

		Optional<MessageDto> optMessage = adminService.registerMentor(mentorDto);
		if (optMessage.isPresent()) {
			String message = optMessage.get().getMessage();
			String subject = "Congratulations";
			String emailId = optMessage.get().getEmaild();
			notify.sendEmail(message, emailId, subject);
			return new GeneralResponse<String>("mentor has been registered successfully", null);
		}
		throw new RuntimeException("Unable to register the mentor");
	}

	@PostMapping(path = "/register/batch")
	public GeneralResponse<String> createBatch(@RequestBody NewBatchDto newBatchDto) {
		Optional<String> optBacthId = adminService.createBatch(newBatchDto);
		if (optBacthId.isPresent()) {
			return new GeneralResponse<String>("a Batch has been created", optBacthId.get());
		}
		throw new RuntimeException("unable to register the batch");

	}

	@GetMapping(path = "/requestlist")
	public ResponseEntity<List<RequestsListsDto>> getRequestList() {
		Optional<List<RequestsListsDto>> optEmployees = adminService.getRequestList();
		if (optEmployees != null) {
			return ResponseEntity.ok(optEmployees.get());
		}
		throw new RuntimeException("List is Empty");

	}

	@PutMapping(path = "/mentor/update/{empId}")
	public GeneralResponse<String> updateMentor(@PathVariable(name = "empId") String empId,
			@RequestBody UpdateMentorDto updateMentorDto) {
		Boolean isUpdated = adminService.updateMentor(empId, updateMentorDto);
		if (isUpdated) {
			return new GeneralResponse<String>("mentor has been updated", updateMentorDto.getMentorName());
		}
		throw new RuntimeException("update failed");
	}

	@PutMapping(path = "/mentor/delete/{empId}")
	public GeneralResponse<String> deleteMentor(@PathVariable(name = "empId") String empId) {
		Boolean isRemoved = adminService.deleteMentor(empId);
		if (isRemoved) {
			return new GeneralResponse<String>("Mentor has been removed", empId);
		}
		throw new RuntimeException("unable to delete the mentor");
	}

	@PutMapping(path = "/batch/delete/{batchId}")
	public GeneralResponse<String> deleteBatch(@PathVariable(name = "batchId") String batchId) {
		Boolean isRemoved = adminService.deleteBatch(batchId);
		if (isRemoved) {
			return new GeneralResponse<String>("batch has been deleted successfully", batchId);
		}
		throw new UnableToDeleteBatchException("unable to delete the batch");
	}

	@PutMapping(path = "/batch/update/{batchId}")
	public GeneralResponse<String> updateBatch(@PathVariable(name = "batchId") String batchId,
			@RequestBody UpdateBatchDto updateBatchDto) {
		Boolean isUpdated = adminService.updateBatch(batchId, updateBatchDto);
		if (isUpdated) {
			return new GeneralResponse<String>("batch details has been  updated", batchId);
		}
		throw new BatchDetailsNotUpdatedException("unable to update batch details");

	}

	@GetMapping(path = "/search/{employeeId}")
	public GeneralResponse<Object> getEmployee(@PathVariable("employeeId") String employeeId) {
		Optional<Object> optdata = adminService.getEmployee(employeeId);
		if (optdata.isPresent()) {
			return new GeneralResponse<Object>("Employee Details", optdata.get());
		}
		throw new UnableToFindTheEmployee("Data not found");
	}

	@GetMapping(path = "/mentors")
	public ResponseEntity<List<MentorDto>> getMentors() {
		Optional<List<MentorDto>> mentorsFromDb = adminService.getMentors();
		if (mentorsFromDb.isPresent()) {
			return ResponseEntity.ok(mentorsFromDb.get());
		}
		throw new NoMentorsFoundException("no mentors found");
	}

	@GetMapping(path = "/batches")
	public ResponseEntity<List<NewBatchDto>> getBatch() {
		Optional<List<NewBatchDto>> batchesFromDb = adminService.getBatchDetails();
		if (batchesFromDb.isPresent()) {
			return ResponseEntity.ok(batchesFromDb.get());
		}
		throw new BatchesNotFoundException("No batches Found");
	}

	@PostMapping(path = "/requestlist/approve/{empId}")
	public GeneralResponse<String> approveRequest(@PathVariable(name = "empId") String empId,
			@RequestBody ApproveDto approveDto) {
		Optional<MessageDto> optMessage = adminService.ApproveEmployee(empId, approveDto);
		if (optMessage.isPresent()) {
			String message = optMessage.get().getMessage();
			String subject = "Greeetings from Technoelevate";
			String emailId = optMessage.get().getEmaild();
			notify.sendEmail(message, emailId, subject);
			return new GeneralResponse<String>("employee has been approved", null);
		}
		throw new EmployeeCannotBeApprovedException("employee cannot be approved");
	}    
	
	@PostMapping(path = "/requestlist/reject/{empId}")
	public GeneralResponse<String>  rejectRequest(@PathVariable(name = "empId") String empId,@RequestParam(name="message") String reason){
		return reason;
	}

}
